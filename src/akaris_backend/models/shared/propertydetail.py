"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .address import Address
from .attraction import Attraction
from .checkinoutpolicy import CheckInOutPolicy
from .geolocation import GeoLocation
from .guestroominfo import GuestRoomInfo
from .identifier import Identifier
from .image import Image
from .meetingrooms import MeetingRooms
from .ota_codewithdescription import OTACodeWithDescription
from .petpolicy import PetPolicy
from .propertyamenity import PropertyAmenity
from .propertykey import PropertyKey
from .rating import Rating
from .restaurant import Restaurant
from .service import Service
from .textfree import TextFree
from .virtualtour import VirtualTour
from .yesnounknownenum import YesNoUnknownEnum
from akaris_backend import utils
from dataclasses_json import Undefined, dataclass_json
from typing import List, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PropertyDetail:
    at_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@type') }})
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The property name"""
    property_key: PropertyKey = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PropertyKey') }})
    accessibility_feature: Optional[List[OTACodeWithDescription]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessibilityFeature'), 'exclude': lambda f: f is None }})
    address: Optional[Address] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address'), 'exclude': lambda f: f is None }})
    attraction: Optional[List[Attraction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Attraction'), 'exclude': lambda f: f is None }})
    business_service: Optional[List[Service]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BusinessService'), 'exclude': lambda f: f is None }})
    check_in_out_policy: Optional[CheckInOutPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CheckInOutPolicy'), 'exclude': lambda f: f is None }})
    class_type_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classTypeCode'), 'exclude': lambda f: f is None }})
    r"""The OTA code of the property detail"""
    complimentary_parking: Optional[YesNoUnknownEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('complimentaryParking'), 'exclude': lambda f: f is None }})
    r"""Yes , No , Unknown"""
    description: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})
    driving_directions: Optional[TextFree] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DrivingDirections'), 'exclude': lambda f: f is None }})
    r"""Textual information to provide descriptions and\/or additional information."""
    geo_location: Optional[GeoLocation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GeoLocation'), 'exclude': lambda f: f is None }})
    r"""Used to specify the geographic coordinates of a location"""
    guest_room_info: Optional[List[GuestRoomInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GuestRoomInfo'), 'exclude': lambda f: f is None }})
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Local reference id."""
    identifier: Optional[Identifier] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Identifier'), 'exclude': lambda f: f is None }})
    r"""Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database."""
    image: Optional[List[Image]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Image'), 'exclude': lambda f: f is None }})
    location_catagory_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locationCatagoryCode'), 'exclude': lambda f: f is None }})
    r"""Location category code"""
    meeting_rooms: Optional[MeetingRooms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MeetingRooms'), 'exclude': lambda f: f is None }})
    pet_policy: Optional[PetPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PetPolicy'), 'exclude': lambda f: f is None }})
    property_amenity: Optional[List[PropertyAmenity]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PropertyAmenity'), 'exclude': lambda f: f is None }})
    rating: Optional[List[Rating]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Rating'), 'exclude': lambda f: f is None }})
    restaurant: Optional[List[Restaurant]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Restaurant'), 'exclude': lambda f: f is None }})
    segment_catagory_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('segmentCatagoryCode'), 'exclude': lambda f: f is None }})
    r"""Segment category code"""
    telephone: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Telephone'), 'exclude': lambda f: f is None }})
    virtual_tour: Optional[VirtualTour] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VirtualTour'), 'exclude': lambda f: f is None }})
    

