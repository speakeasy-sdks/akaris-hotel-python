"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .doctypecodeenum import DocTypeCodeEnum
from .genderenum import GenderEnum
from .personname import PersonName
from akaris_backend import utils
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TravelDocument:
    at_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@type') }})
    doc_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('docNumber') }})
    r"""Document number value"""
    gender: GenderEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Gender') }})
    r"""Gender Type Male, Female etc. This field is not used by Hotel APIs and will be ignored"""
    person_name: PersonName = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PersonName') }})
    birth_country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('birthCountry'), 'exclude': lambda f: f is None }})
    r"""Birth country on Country Code ISO value"""
    birth_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('birthDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'exclude': lambda f: f is None }})
    r"""The date of birth of the document holder"""
    birth_place: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('birthPlace'), 'exclude': lambda f: f is None }})
    r"""Birth place value"""
    doc_type: Optional[DocTypeCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('docType'), 'exclude': lambda f: f is None }})
    r"""Codes from OTA DOC - Document Type"""
    expire_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expireDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'exclude': lambda f: f is None }})
    r"""Date of expiration"""
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Locally referenced id"""
    issue_country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issueCountry'), 'exclude': lambda f: f is None }})
    r"""Issue country on Country Code ISO"""
    issue_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issueDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'exclude': lambda f: f is None }})
    r"""Date of Issue"""
    nationality: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Nationality'), 'exclude': lambda f: f is None }})
    r"""Specifies a 2 character country code as defined in ISO3166."""
    place_of_issue: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('placeOfIssue'), 'exclude': lambda f: f is None }})
    r"""Place of issue value"""
    residence: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('residence'), 'exclude': lambda f: f is None }})
    r"""Residence value"""
    state_prov_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateProvCode'), 'exclude': lambda f: f is None }})
    r"""State Province Code value"""
    

