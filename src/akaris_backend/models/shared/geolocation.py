"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import positionaccuracyenum as shared_positionaccuracyenum
from ..shared import unitofdistanceenum as shared_unitofdistanceenum
from akaris_backend import utils
from dataclasses_json import Undefined, dataclass_json
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GeoLocation:
    r"""Used to specify the geographic coordinates of a location"""
    latitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('latitude') }})
    r"""The measure of the angular distance on a meridan north or south equator"""
    longitude: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longitude') }})
    r"""The measure of the angular distance on a meridan east or west equator"""
    altitude: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('altitude'), 'exclude': lambda f: f is None }})
    r"""The height or an item, typically measured above sea level"""
    altitude_unit_of_distance: Optional[shared_unitofdistanceenum.UnitOfDistanceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('altitudeUnitOfDistance'), 'exclude': lambda f: f is None }})
    r"""Miles, Kilometers, etc."""
    format_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formatURL'), 'exclude': lambda f: f is None }})
    r"""The URL to the format for the latitude and longitude for this location."""
    map_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mapURL'), 'exclude': lambda f: f is None }})
    r"""link for embedded map showing location"""
    position_accuracy: Optional[shared_positionaccuracyenum.PositionAccuracyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('positionAccuracy'), 'exclude': lambda f: f is None }})
    r"""Specifies the level of accuracy for the position"""
    

