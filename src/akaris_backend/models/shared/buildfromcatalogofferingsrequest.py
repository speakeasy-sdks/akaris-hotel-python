"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .ancillaryofferingidentifier import AncillaryOfferingIdentifier
from .catalogofferingidentifier import CatalogOfferingIdentifier
from .catalogofferingsidentifier import CatalogOfferingsIdentifier
from .productidentifier import ProductIdentifier
from akaris_backend import utils
from dataclasses_json import Undefined, dataclass_json
from typing import List, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BuildFromCatalogOfferingsRequest:
    at_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@type') }})
    catalog_offering_identifier: CatalogOfferingIdentifier = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CatalogOfferingIdentifier') }})
    catalog_offerings_identifier: CatalogOfferingsIdentifier = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CatalogOfferingsIdentifier') }})
    product_identifier: List[ProductIdentifier] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductIdentifier') }})
    ancillary_offering_identifier: Optional[List[AncillaryOfferingIdentifier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AncillaryOfferingIdentifier'), 'exclude': lambda f: f is None }})
    

