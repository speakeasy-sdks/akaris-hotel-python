"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .changefeemethodenum import ChangeFeeMethodEnum
from akaris_backend import utils
from dataclasses_json import Undefined, dataclass_json
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChangeFeeCollectionMethod:
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""The code value"""
    change_fee_issued_separately_ind: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('changeFeeIssuedSeparatelyInd'), 'exclude': lambda f: f is None }})
    r"""if true, the change fee will be issued as a separate transaction to the residual amount"""
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description value"""
    sub_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subCode'), 'exclude': lambda f: f is None }})
    r"""The subcode value"""
    tax_included_in_base_amount_ind: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxIncludedInBaseAmountInd'), 'exclude': lambda f: f is None }})
    r"""If true, the tax  on the fee will be included in the base fee amount and sent as a single value to the supplier for fulfilment"""
    value: Optional[ChangeFeeMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    

